{"version":3,"sources":["../../../src/api/controllers/notes.js"],"names":["getNotes","req","res","next","find","deleted","select","exec","then","status","json","message","notes","catch","error","err","getNote","id","params","findById","note","createNote","newNote","_id","Types","ObjectId","title","body","text","author","color","collabs","save","updateNote","propsToUpdate","prop","hasOwnProperty","update","$set","updatedAt","Date","deleteNote"],"mappings":"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","file":"notes.js","sourcesContent":["import mongoose from 'mongoose';\r\n\r\nimport Note from '../models/note';\r\n\r\nexport const getNotes = (req, res, next) => {\r\n  Note.find({ deleted: false })\r\n    .select('_id title text author color collabs deleted')\r\n    .exec()\r\n    .then(notes => {\r\n      res.status(200).json({\r\n        message: 'Fetched all notes.',\r\n        notes\r\n      });\r\n    })\r\n    .catch(err => {\r\n      res.status(500).json({\r\n        error: err\r\n      });\r\n    });\r\n};\r\n\r\nexport const getNote = (req, res, next) => {\r\n  const id = req.params.id;\r\n\r\n  Note.findById(id)\r\n    .select('_id title text author collabs color deleted')\r\n    .exec()\r\n    .then(note => {\r\n      if (note) {\r\n        res.status(200).json({\r\n          message: 'Not found.',\r\n          note\r\n        });\r\n      } else {\r\n        res.status(404).json(null);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      res.status(500).json({\r\n        error: err\r\n      });\r\n    });\r\n};\r\n\r\nexport const createNote = (req, res, next) => {\r\n  const newNote = new Note({\r\n    _id: new mongoose.Types.ObjectId(),\r\n    title: req.body.title,\r\n    text: req.body.text,\r\n    author: req.body.author,\r\n    color: req.body.color,\r\n    collabs: req.body.collabs\r\n});\r\n\r\n  newNote.save()\r\n    .then(note => {\r\n      res.status(201).json({\r\n        message: 'New note created.',\r\n        note: {\r\n          _id: note._id,\r\n          title: note.title,\r\n          text: note.text,\r\n          author: note.author,\r\n          color: note.color\r\n        }\r\n      });\r\n    })\r\n    .catch(err => {\r\n      res.status(500).json({\r\n        error: err\r\n      });\r\n    });\r\n};\r\n\r\nexport const updateNote = (req, res, next) => {\r\n  const id = req.params.id;\r\n  let propsToUpdate = {};\r\n\r\n  for (let prop in req.body) {\r\n    if (req.body.hasOwnProperty(prop)) {\r\n      propsToUpdate[prop] = req.body[prop];\r\n    }\r\n  }\r\n\r\n  Note.update({ _id: id }, {\r\n    $set: {\r\n      ...propsToUpdate,\r\n      updatedAt: new Date()\r\n    }\r\n  }).exec()\r\n    .then(result => {\r\n      Note.findById(id)\r\n        .select('_id title text author collabs color deleted updatedAt')\r\n        .exec()\r\n        .then(note => {\r\n          res.status(200).json({\r\n            message: 'Note updated.',\r\n            note\r\n          });\r\n        });\r\n    })\r\n    .catch(err => {\r\n      res.status(500).json(err);\r\n    });\r\n};\r\n\r\nexport const deleteNote = (req, res, next) => {\r\n  Note.update({ _id: req.params.id }, {\r\n    $set: { deleted: true }\r\n  }).exec()\r\n    .then(result => {\r\n      Note.findById(id)\r\n        .select('_id title text author color')\r\n        .exec()\r\n        .then(note => {\r\n          res.status(200).json({\r\n            message: 'Note deleted.'\r\n          });\r\n        });\r\n    })\r\n    .catch(err => {\r\n      res.status(500).json(err);\r\n    });\r\n};"]}